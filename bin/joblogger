#!/usr/bin/env bash

##############################################################################
# COMMON: Unix utilities
# https://github.com/markuskimius/common
#
# Copyright (c)2020-2021 Mark Kim
# Released under GNU General Public License version 2.
# https://github.com/markuskimius/common/blob/main/LICENSE
##############################################################################

function usage() {
    cat <<EOF
Usage: ${SCRIPTNAME} [OPTIONS] JOBNAME COMMAND [ARGUMENTS]

Execute a command and write its output to a log file.

  JOBNAME               The name of the job.
  COMMAND [ARGUMENTS]   Command to execute.

Options:
  -q                    Quiet mode.
  -t TIMEOUT            Maximum runtime of the job. [Default=unlimited]

Environment Variables:
  WORKDIR               The default directory under with logs and tokens are
                        created.  Logs are created under \$WORKDIR/log and the
                        tokens under \$WORKDIR/token.

Files:
  \$WORKDIR/log/JOBNAME-YYYYMMDD_hh:mm:ss.log
                        The default name of the logfile, where YYYYMMDD_hh:mm:ss
                        is the date and time of when ${SCRIPTNAME} is started.

  \$WORKDIR/token/JOBNAME.token
                        The default name of the token file.

Example
  00 00 * * * BASH_ENV=${WORKDIR}/.bashrc ${DPM}/common/bin/joblogger -t "10 minutes" CRON_FILELIST 'find "\$HOME" -type f'

EOF
}


##############################################################################
# PROGRAM BEGINS HERE

source "logger.sh" || exit 1

SCRIPTNAME=$(basename -- "$BASH_SOURCE")
TOKENDIR=$WORKDIR/token
LOGDIR=$WORKDIR/log
STARTED=$(date +%s)
TIMEOUT=""


function main() {
    local OPTARG OPTIND OPTERR opt
    local exitcode=0

    # Process options
    while getopts "t:qh" opt; do
        case "$opt" in
            t)  TIMEOUT=$(date -d "$OPTARG" +%s) ;;
            q)  LOGGER_ENABLE=""                 ;;
            h)  usage && exit 0                  ;;
            *)  exitcode=1                       ;;
        esac
    done
    shift $((OPTIND-1))

    if (( $# < 2 )); then
        printf "Expected 2 or more arguments, got %s\n" "${#OPTARG[@]}" 1>&2
        exitcode=1
    fi

    # Sanity check
    if (( exitcode )); then
        printf "Type '%s -h' for help\n" "$SCRIPTNAME" 1>&2
        exit 1
    fi

    # Do my thing
    joblogger "$@" || exitcode=$?

    return "$exitcode"
}


function joblogger() {
    local jobname=$1 && shift
    local logfile=$(logname "$jobname")
    local tokenfile=$(tokenname "$jobname")
    local tokendir=${tokenfile%/*}
    local logdir=${logfile%/*}
    local exitcode=0
    local pid=""

    # Setup
    mkdir -p "$logdir"                   \
    && mkdir -p "$tokendir"              \
    || {
        printf "%s: Unable to setup for %s" "$SCRIPTNAME" "$jobname" 1>&2
        return 1
    }

    # Create the token
    {
        local sigterm=$(kill -l TERM)
        local sighup=$(kill -l HUP)

        # Install signal handlers
        trap '__on_signal TERM' TERM
        trap '__on_signal HUP' HUP
        trap '__on_signal INT' INT
        trap '__on_exit' EXIT

        # Start the job
        bash <(cat <<EOF
            export PYTHONUNBUFFERED=1

            # Trap signal handlers
            trap 'printf "\nCaught SIGTERM\n" 1>&2 ; trap - TERM HUP INT ; exit \$(( 128 + $sigterm ))' TERM
            trap 'printf "\nCaught SIGHUP\n"  1>&2 ; trap - TERM HUP INT ; exit \$(( 128 + $sighup  ))' HUP
            trap 'printf "\nCaught SIGINT\n"  1>&2 ; trap - TERM HUP INT ; kill -s INT \$\$' INT
            trap 'kill 0' EXIT

            # Do my thing.  Background the job so we can report catching signals.
            (
                $(printf "%s " "$@")
            ) & wait \$!

            # Restore the signal handlers
            trap - TERM
            trap - HUP
            trap - INT
EOF
        ) &> "$logfile" & pid=$!

        # Record the job
        printf "JOB_NAME=%s\n" "$jobname"
        printf "JOB_LOG=%s\n" "$logfile"
        printf "JOB_PID=%s\n" "$pid"
        printf "JOB_PPID=%s\n" "$$"
        printf "JOB_STARTED=%s\n" "$STARTED"
        printf "JOB_TIMEOUT=%s\n" "$TIMEOUT"

        # Wait
        printf "Started %s with pid %s tokenfile %s logfile %s\n" "$jobname" "$pid" "$tokenfile" "$logfile" 1>&2
        wait "$pid" || exitcode=$?

        # Record the result
        printf "JOB_STOPPED=%s\n" "$(date +%s)"
        printf "JOB_EXITCODE=%s\n" "$exitcode"

        # Restore the signal handlers
        trap - TERM
        trap - HUP
        trap - INT
        trap - EXIT
    } > "$tokenfile"

    return "$exitcode"
}


function logname() {
    local jobname=$1
    local datetime=$(date -d "@${STARTED}" "+%Y%m%d_%H:%M:%S")

    printf "%s/%s_%s.log" "$LOGDIR" "$jobname" "$datetime"
}


function tokenname() {
    local jobname=$1

    printf "%s\n" "${TOKENDIR}/${jobname}.token"
}


function __on_signal() {
    local signal=$1
    local signum=$(kill -l $signal)

    # Record the cause of termination
    printf "JOB_STOPPED=%s\n" "$(date +%s)"
    printf "JOB_EXITCODE=%s\n" "SIG${signal}"

    # Restore the signal handlers
    trap - TERM
    trap - HUP
    trap - INT

    # SIGINT should send signal to itself to terminate.  See
    # http://mywiki.wooledge.org/SignalTrap#Special_Note_On_SIGINT_and_SIGQUIT
    if [[ "$signal" == "INT" ]]; then
        kill -s "$signal" $$
    fi

    # Terminate
    exit $((128 + signum))
}


function __on_exit() {
    # Kill all child processes
    kill 0
}


##############################################################################
# ENTRY POINT

main "$@"
