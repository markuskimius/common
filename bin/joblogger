#!/usr/bin/env bash

##############################################################################
# COMMON: Unix utilities
# https://github.com/markuskimius/common
#
# Copyright (c)2020-2021 Mark Kim
# Released under GNU General Public License version 2.
# https://github.com/markuskimius/common/blob/main/LICENSE
##############################################################################

function usage() {
    cat <<EOF
Execute a command and write its output to a log file.

Usage: ${SCRIPTNAME} [OPTIONS] JOBNAME COMMAND

Options:
  JOBNAME               The name of the job.
  COMMAND               Command to execute.  May be a quoted string containing
                        arguments.

  -t,--timeout=TIMEOUT  Maximum runtime of the job. [Default=unlimited]

Environment Variables:
  WORKDIR               The default directory under with logs and tokens are
                        created.  Logs are created under \$WORKDIR/log and the
                        tokens under \$WORKDIR/token.

Files:
  \$WORKDIR/log/JOBNAME-YYYYMMDD_hh:mm:ss.log
                        The default name of the logfile, where YYYYMMDD_hh:mm:ss
                        is the date and time of when ${SCRIPTNAME} is started.

  \$WORKDIR/token/JOBNAME.token
                        The default name of the token file.

Example
  00 00 * * * BASH_ENV=${WORKDIR}/.bashrc ${DPM}/common/bin/joblogger -t "10 minutes" CRON_FILELIST 'find "\$HOME" -type f'

EOF
}


##############################################################################
# PROGRAM BEGINS HERE

source "getopt.sh" || exit 1
source "logger.sh" || exit 1

SCRIPTNAME=$(basename -- "$BASH_SOURCE")
TOKENDIR=$WORKDIR/token
LOGDIR=$WORKDIR/log
STARTED=$(date +%s)
TIMEOUT=""


function main() {
    local OPTOPT OPTARG
    local exitcode=0

    # Process options
    while getopt-sh "t:h" "timeout:,help" "$@"; do
        case "$OPTOPT" in
            -t|--timeout)  TIMEOUT=$(date -d "$OPTARG" +%s) ;;
            -h|--help)     usage && exit 0  ;;
            *)             errcount=$((errcount+1)) ;;
        esac
    done

    if (( ${#OPTARG[@]} != 2 )); then
        printf "Expected 2 arguments, got %s\n" "${#OPTARG[@]}" 1>&2
        errcount=$((errcount+1))
    fi

    # Sanity check
    if (( errcount )); then
        printf "Type '%s -h' for help\n" "$SCRIPTNAME" 1>&2
        exit 1
    fi

    # Install signal handlers
    trap '__on_signal TERM' TERM
    trap '__on_signal HUP' HUP
    trap '__on_signal INT' INT
    trap '__on_exit' EXIT

    # Do my thing
    joblogger "${OPTARG[@]}" || exitcode=$?

    # Restore the signal handlers
    trap - TERM
    trap - HUP
    trap - INT
    trap - EXIT

    return "$exitcode"
}


function __on_signal() {
    local signal=$1
    local signum=$(kill -l $signal)

    # Record the cause of termination
    logger WARNING "Caught SIG${signal}"

    # Restore the signal handlers
    trap - TERM
    trap - HUP
    trap - INT

    # SIGINT should send signal to itself to terminate.  See
    # http://mywiki.wooledge.org/SignalTrap#Special_Note_On_SIGINT_and_SIGQUIT
    if [[ "$signal" == "INT" ]]; then
        kill -s $signal $$
    fi

    # Terminate
    exit $((128 + signum))
}


function __on_exit() {
    # Kill all child processes
    kill 0
}


function joblogger() {
    local jobname=$1
    local command=$2
    local logfile=$(logname "$jobname")

    printf "%s logfile is %s\n" "$jobname" "$logfile"

    mkdir -p "$(dirname "$logfile")" \
    && run "$jobname" "$command" >& "$logfile"
}


function logname() {
    local jobname=$1
    local datetime=$(date -d "@${STARTED}" "+%Y%m%d_%H:%M:%S")

    printf "%s/%s-%s.log" "$LOGDIR" "$jobname" "$datetime"
}


function run() {
    local jobname=$1
    local command=$2
    local tokenfile=$(tokenname)
    local exitcode=0
    local pid

    logger INFO "${jobname} started"

    # Create the token
    if ! mktoken "$jobname"; then
        logger ERROR "Unable to create token, terminating"
        exit 1
    fi

    # Run the command
    bash <<<"$command" & pid=$!
    printf "JOB_PID=%s\n" "$pid" >> "$tokenfile"

    # Wait
    wait $pid
    exitcode=$?
    (
        printf "JOB_EXITCODE=%s\n" "$exitcode"
        printf "JOB_EXITED=%s\n" "$(date +%s)"
    ) >> "$tokenfile"

    # Report status
    if (( exitcode == 0 )); then
        logger INFO "${jobname} terminated successfully"
    else
        logger INFO "${jobname} terminated with exit code ${exitcode}"
    fi

    return $exitcode
}


function mktoken() {
    local jobname=$1
    local tokenfile=$(tokenname)

    mkdir -p "$(dirname "$tokenfile")" \
    && rm -f "$tokenfile"              \
    && (
        printf "JOB_NAME=%s\n" "$jobname"
        printf "JOB_STARTED=%s\n" "$STARTED"
        printf "JOB_TIMEOUT=%s\n" "$TIMEOUT"
    ) > "$tokenfile"
}


function tokenname() {
    printf "%s\n" "${TOKENDIR}/${jobname}.token"
}


##############################################################################
# ENTRY POINT

main "$@"
