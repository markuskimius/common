#!/usr/bin/env bash

##############################################################################
# COMMON: Unix utilities
# https://github.com/markuskimius/common
#
# Copyright (c)2020-2021 Mark Kim
# Released under GNU General Public License version 2.
# https://github.com/markuskimius/common/blob/main/LICENSE
##############################################################################

function usage() {
    cat <<EOF
Usage: ${SCRIPTNAME} [OPTIONS] COMMAND [ARGUMENTS]

COMMAND:
  cat                   Output the consolidated crontab of all active packages.
                        See CRONTAB below for more information.

  diff [ARGUMENTS]      Diff the crontabs of all active packages against the
                        installed crontab.  ARGUMENTS, if any, are passed to
                        the DIFF command.

  install               Install the crontab of all active packages.

CRONTAB
  A package may include a crontab under "\$DPM/PKGNAME/etc/crontab.shdoc".  The
  format of a .shdoc file is same as that of a BASH "Here Document"* without
  the limit strings.  That is, environment variables may be embedded within it
  as well as command output, using special characters such as the dollar sign
  or a backticket, and special characters may be escaped with a backslash.
  See the BASH documentation for more details on the Here Document.

  * - https://tldp.org/LDP/abs/html/here-docs.html

ENVIRONMENT VARIABLES:
  DIFF                  The command used to show diff.  [Default=diff].

EOF
}


##############################################################################
# PROGRAM BEGINS HERE

SCRIPTNAME=$(basename -- "$BASH_SOURCE")


function main() {
    local command=()
    local isok=1

    # Execute the command
    case "$1" in
        cat)      shift && action=( crontab-cat     ) ;;
        diff)     shift && action=( crontab-diff    ) ;;
        install)  shift && action=( crontab-install ) ;;
        help)     shift && action=( usage           ) ;;
        *)        isok=0
    esac

    # Ensure core dependencies are met
    ensure-deps || isok=0

    # Sanity check
    if (( ! isok )); then
        usage 1>&2
        exit 1
    fi

    "${action[@]}" "$@"
}


function crontab-cat() {
    source "template.sh" || exit 1

    local activefile="${DPM}/.active"
    local active=()
    local pkgname
    local crontab
    local count=0

    # Header
    printf "%s\n" "$(repeat "#" 78)"
    printf "# Auto generated by '%s' on %s\n" "$SCRIPTNAME" "$(date)"
    printf "\n"

    # Get the list of active packages
    if [[ -r "$activefile" ]]; then
        active=( $(cat "$activefile") )
    fi

    # Cat their crontab contents
    for pkgname in "${active[@]}"; do
        crontab="${DPM}/${pkgname}/etc/crontab.shdoc"
        [[ -r "$crontab" ]] || continue

        printf "%s\n" "$(repeat "#" 40)"
        printf "# Package '%s'\n" "$pkgname"
        template "$crontab"
        printf "\n"

        (( count+=1 ))
    done

    if (( count == 0 )); then
        printf "# No packages with crontab\n"
    fi
}


function crontab-diff() {
    "${DIFF-diff}" "$@" <(crontab -l) <(crontab-cat)
}


function crontab-install() {
    local crontab=$(crontab-cat)

    # Show the diff first
    "${DIFF-diff}" -u <(crontab -l) <(printf "%s\n\n" "$crontab")

    # Install the new crontab
    printf "Applying new crontab...\n"
    printf "%s\n\n" "$crontab" | crontab -
}


##############################################################################
# HELPER FUNCTIONS

function ensure-deps() {
    local isok=1

    [[ -z "$WORKDIR" ]] && printf "\$WORKDIR not set\n" 1>&2 && isok=0
    [[ -n "$WORKDIR" ]] && mkdir -p "$WORKDIR" || isok=0

    (( isok ))
}


function repeat() {
    local char=$1
    local count=$2

    printf "${char}%.0s" $(seq "$count")
}


##############################################################################
# ENTRY POINT

main "$@"
