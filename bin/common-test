#!/usr/bin/env bash

##############################################################################
# COMMON: Unix utilities
# https://github.com/markuskimius/common
#
# Copyright (c)2020-2021 Mark Kim
# Released under GNU General Public License version 2.
# https://github.com/markuskimius/common/blob/main/LICENSE
##############################################################################

function usage() {
    cat <<EOF
Usage: ${SCRIPTNAME}

Test the environment to ensure it has all dependencies required by COMMON.

EOF
}


##############################################################################
# PROGRAM BEGINS HERE

SCRIPTNAME=$(basename -- "$BASH_SOURCE")
SCRIPTPATH=$BASH_SOURCE
SCRIPTARGV=( "$@" )


function main() {
    local OPTIND OPTERR OPTARG opt
    local isok=1

    # Check arguments
    while getopts "h" opt; do
        case "$opt" in
            h)  usage && exit ;;
            *)  isok=0
        esac
    done
    shift $((OPTIND-1))

    # Sanity check
    if (( ! isok )); then
        usage 1>&2
        exit 1
    fi

    test-command "$@"
}


function test-command() {
    source "ps.sh"       || exit 1
    source "colorize.sh" || exit 1

    local commands=(
        basename cat crontab dirname env git grep hostname jq netstat
        sort tac timeout tput whoami ts mpstat netstat free
    )
    local vars=( DPM HOME HOSTNAME USER WORKDIR )
    local isok=1
    local tmp

    function checking() {
        printf "%-44s" "Checking $1 ..."
    }

    function pass() {
        printf "["
        colorize green PASS 1
        printf "]\n"
    }

    function fail() {
        printf "["
        colorize red FAIL 1
        printf "]\n"
        isok=0
    }

    # variables
    for tmp in "${vars[@]}"; do
        checking "environment variable \$$tmp"
        declare -p "$tmp" &>/dev/null && pass || fail
    done

    # commands
    for tmp in "${commands[@]}"; do
        checking "command $tmp"
        command -v "$tmp" &>/dev/null && pass || fail
    done

    # bash 4
    if true; then
        checking "bash is version 4 or later"
        (( "$(bash -c 'printf "%s" "${BASH_VERSINFO[0]}"')" >= 4 )) && pass || fail
    fi

    # enhanced getopt
    if true; then
        checking "getopt is enhanced"

        command -v getopt >/dev/null && getopt -T &>/dev/null
        (( $? == 4 )) && pass || fail
    fi

    # ps
    if true; then
        checking "ps with -o support"
        ps-sh ax -ouser &>/dev/null && pass || fail
    fi

    # realpath
    if true; then
        checking "realpath or readlink -f"

        if command -v realpath >/dev/null; then
            pass
        elif command -v readlink >/dev/null && readlink -f . &>/dev/null; then
            pass
        else
            fail
        fi
    fi

    # python 3
    if true; then
        local version=$(common-python3 --version 2>/dev/null)
        local number=${version##* }
        local major=${number%%.*}

        checking "python is version 3"
        [[ -n "$major" ]] && (( major == 3 )) && pass || fail
    fi

    (( isok ))
}


##############################################################################
# ENTRY POINT

main "$@"
